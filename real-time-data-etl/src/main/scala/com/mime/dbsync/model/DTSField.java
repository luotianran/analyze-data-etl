/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mime.dbsync.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DTSField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6542147513159852604L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DTSField\",\"namespace\":\"com.mime.dbsync.model\",\"fields\":[{\"name\":\"encoding\",\"type\":\"string\"},{\"name\":\"fieldname\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"isPrimary\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DTSField> ENCODER =
      new BinaryMessageEncoder<DTSField>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DTSField> DECODER =
      new BinaryMessageDecoder<DTSField>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DTSField> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DTSField> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DTSField>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DTSField to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DTSField from a ByteBuffer. */
  public static DTSField fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence encoding;
  @Deprecated public CharSequence fieldname;
  @Deprecated public CharSequence type;
  @Deprecated public java.nio.ByteBuffer value;
  @Deprecated public boolean isPrimary;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DTSField() {}

  /**
   * All-args constructor.
   * @param encoding The new value for encoding
   * @param fieldname The new value for fieldname
   * @param type The new value for type
   * @param value The new value for value
   * @param isPrimary The new value for isPrimary
   */
  public DTSField(CharSequence encoding, CharSequence fieldname, CharSequence type, java.nio.ByteBuffer value, Boolean isPrimary) {
    this.encoding = encoding;
    this.fieldname = fieldname;
    this.type = type;
    this.value = value;
    this.isPrimary = isPrimary;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return encoding;
    case 1: return fieldname;
    case 2: return type;
    case 3: return value;
    case 4: return isPrimary;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: encoding = (CharSequence)value$; break;
    case 1: fieldname = (CharSequence)value$; break;
    case 2: type = (CharSequence)value$; break;
    case 3: value = (java.nio.ByteBuffer)value$; break;
    case 4: isPrimary = (Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'encoding' field.
   * @return The value of the 'encoding' field.
   */
  public CharSequence getEncoding() {
    return encoding;
  }

  /**
   * Sets the value of the 'encoding' field.
   * @param value the value to set.
   */
  public void setEncoding(CharSequence value) {
    this.encoding = value;
  }

  /**
   * Gets the value of the 'fieldname' field.
   * @return The value of the 'fieldname' field.
   */
  public CharSequence getFieldname() {
    return fieldname;
  }

  /**
   * Sets the value of the 'fieldname' field.
   * @param value the value to set.
   */
  public void setFieldname(CharSequence value) {
    this.fieldname = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'isPrimary' field.
   * @return The value of the 'isPrimary' field.
   */
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  /**
   * Sets the value of the 'isPrimary' field.
   * @param value the value to set.
   */
  public void setIsPrimary(Boolean value) {
    this.isPrimary = value;
  }

  /**
   * Creates a new DTSField RecordBuilder.
   * @return A new DTSField RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new DTSField RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DTSField RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new DTSField RecordBuilder by copying an existing DTSField instance.
   * @param other The existing instance to copy.
   * @return A new DTSField RecordBuilder
   */
  public static Builder newBuilder(DTSField other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for DTSField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DTSField>
    implements org.apache.avro.data.RecordBuilder<DTSField> {

    private CharSequence encoding;
    private CharSequence fieldname;
    private CharSequence type;
    private java.nio.ByteBuffer value;
    private boolean isPrimary;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.encoding)) {
        this.encoding = data().deepCopy(fields()[0].schema(), other.encoding);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldname)) {
        this.fieldname = data().deepCopy(fields()[1].schema(), other.fieldname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isPrimary)) {
        this.isPrimary = data().deepCopy(fields()[4].schema(), other.isPrimary);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DTSField instance
     * @param other The existing instance to copy.
     */
    private Builder(DTSField other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.encoding)) {
        this.encoding = data().deepCopy(fields()[0].schema(), other.encoding);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fieldname)) {
        this.fieldname = data().deepCopy(fields()[1].schema(), other.fieldname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isPrimary)) {
        this.isPrimary = data().deepCopy(fields()[4].schema(), other.isPrimary);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'encoding' field.
      * @return The value.
      */
    public CharSequence getEncoding() {
      return encoding;
    }

    /**
      * Sets the value of the 'encoding' field.
      * @param value The value of 'encoding'.
      * @return This builder.
      */
    public Builder setEncoding(CharSequence value) {
      validate(fields()[0], value);
      this.encoding = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'encoding' field has been set.
      * @return True if the 'encoding' field has been set, false otherwise.
      */
    public boolean hasEncoding() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'encoding' field.
      * @return This builder.
      */
    public Builder clearEncoding() {
      encoding = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fieldname' field.
      * @return The value.
      */
    public CharSequence getFieldname() {
      return fieldname;
    }

    /**
      * Sets the value of the 'fieldname' field.
      * @param value The value of 'fieldname'.
      * @return This builder.
      */
    public Builder setFieldname(CharSequence value) {
      validate(fields()[1], value);
      this.fieldname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fieldname' field has been set.
      * @return True if the 'fieldname' field has been set, false otherwise.
      */
    public boolean hasFieldname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fieldname' field.
      * @return This builder.
      */
    public Builder clearFieldname() {
      fieldname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public Builder clearValue() {
      value = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPrimary' field.
      * @return The value.
      */
    public Boolean getIsPrimary() {
      return isPrimary;
    }

    /**
      * Sets the value of the 'isPrimary' field.
      * @param value The value of 'isPrimary'.
      * @return This builder.
      */
    public Builder setIsPrimary(boolean value) {
      validate(fields()[4], value);
      this.isPrimary = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isPrimary' field has been set.
      * @return True if the 'isPrimary' field has been set, false otherwise.
      */
    public boolean hasIsPrimary() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isPrimary' field.
      * @return This builder.
      */
    public Builder clearIsPrimary() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DTSField build() {
      try {
        DTSField record = new DTSField();
        record.encoding = fieldSetFlags()[0] ? this.encoding : (CharSequence) defaultValue(fields()[0]);
        record.fieldname = fieldSetFlags()[1] ? this.fieldname : (CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (CharSequence) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.isPrimary = fieldSetFlags()[4] ? this.isPrimary : (Boolean) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DTSField>
    WRITER$ = (org.apache.avro.io.DatumWriter<DTSField>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DTSField>
    READER$ = (org.apache.avro.io.DatumReader<DTSField>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
