/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mime.dbsync.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DTSRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2594041786834763211L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DTSRecord\",\"namespace\":\"com.mime.dbsync.model\",\"fields\":[{\"name\":\"record_id\",\"type\":\"string\"},{\"name\":\"instance\",\"type\":\"string\"},{\"name\":\"source_type\",\"type\":\"string\"},{\"name\":\"source_category\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"checkpoint\",\"type\":\"string\"},{\"name\":\"record_type\",\"type\":\"string\"},{\"name\":\"db\",\"type\":[\"string\",\"null\"]},{\"name\":\"table_name\",\"type\":[\"string\",\"null\"]},{\"name\":\"record_recording\",\"type\":[\"string\",\"null\"]},{\"name\":\"primary\",\"type\":[\"string\",\"null\"]},{\"name\":\"fields_enc\",\"type\":[\"string\",\"null\"]},{\"name\":\"isFirstInLogevent\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"fields\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DTSField\",\"fields\":[{\"name\":\"encoding\",\"type\":\"string\"},{\"name\":\"fieldname\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"isPrimary\",\"type\":\"boolean\"}]}},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DTSRecord> ENCODER =
      new BinaryMessageEncoder<DTSRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DTSRecord> DECODER =
      new BinaryMessageDecoder<DTSRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DTSRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DTSRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DTSRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DTSRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DTSRecord from a ByteBuffer. */
  public static DTSRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence record_id;
  @Deprecated public CharSequence instance;
  @Deprecated public CharSequence source_type;
  @Deprecated public CharSequence source_category;
  @Deprecated public CharSequence timestamp;
  @Deprecated public CharSequence checkpoint;
  @Deprecated public CharSequence record_type;
  @Deprecated public CharSequence db;
  @Deprecated public CharSequence table_name;
  @Deprecated public CharSequence record_recording;
  @Deprecated public CharSequence primary;
  @Deprecated public CharSequence fields_enc;
  @Deprecated public Boolean isFirstInLogevent;
  @Deprecated public java.util.List<com.mime.dbsync.model.DTSField> fields;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DTSRecord() {}

  /**
   * All-args constructor.
   * @param record_id The new value for record_id
   * @param instance The new value for instance
   * @param source_type The new value for source_type
   * @param source_category The new value for source_category
   * @param timestamp The new value for timestamp
   * @param checkpoint The new value for checkpoint
   * @param record_type The new value for record_type
   * @param db The new value for db
   * @param table_name The new value for table_name
   * @param record_recording The new value for record_recording
   * @param primary The new value for primary
   * @param fields_enc The new value for fields_enc
   * @param isFirstInLogevent The new value for isFirstInLogevent
   * @param fields The new value for fields
   */
  public DTSRecord(CharSequence record_id, CharSequence instance, CharSequence source_type, CharSequence source_category, CharSequence timestamp, CharSequence checkpoint, CharSequence record_type, CharSequence db, CharSequence table_name, CharSequence record_recording, CharSequence primary, CharSequence fields_enc, Boolean isFirstInLogevent, java.util.List<com.mime.dbsync.model.DTSField> fields) {
    this.record_id = record_id;
    this.instance = instance;
    this.source_type = source_type;
    this.source_category = source_category;
    this.timestamp = timestamp;
    this.checkpoint = checkpoint;
    this.record_type = record_type;
    this.db = db;
    this.table_name = table_name;
    this.record_recording = record_recording;
    this.primary = primary;
    this.fields_enc = fields_enc;
    this.isFirstInLogevent = isFirstInLogevent;
    this.fields = fields;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return record_id;
    case 1: return instance;
    case 2: return source_type;
    case 3: return source_category;
    case 4: return timestamp;
    case 5: return checkpoint;
    case 6: return record_type;
    case 7: return db;
    case 8: return table_name;
    case 9: return record_recording;
    case 10: return primary;
    case 11: return fields_enc;
    case 12: return isFirstInLogevent;
    case 13: return fields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: record_id = (CharSequence)value$; break;
    case 1: instance = (CharSequence)value$; break;
    case 2: source_type = (CharSequence)value$; break;
    case 3: source_category = (CharSequence)value$; break;
    case 4: timestamp = (CharSequence)value$; break;
    case 5: checkpoint = (CharSequence)value$; break;
    case 6: record_type = (CharSequence)value$; break;
    case 7: db = (CharSequence)value$; break;
    case 8: table_name = (CharSequence)value$; break;
    case 9: record_recording = (CharSequence)value$; break;
    case 10: primary = (CharSequence)value$; break;
    case 11: fields_enc = (CharSequence)value$; break;
    case 12: isFirstInLogevent = (Boolean)value$; break;
    case 13: fields = (java.util.List<com.mime.dbsync.model.DTSField>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'record_id' field.
   * @return The value of the 'record_id' field.
   */
  public CharSequence getRecordId() {
    return record_id;
  }

  /**
   * Sets the value of the 'record_id' field.
   * @param value the value to set.
   */
  public void setRecordId(CharSequence value) {
    this.record_id = value;
  }

  /**
   * Gets the value of the 'instance' field.
   * @return The value of the 'instance' field.
   */
  public CharSequence getInstance() {
    return instance;
  }

  /**
   * Sets the value of the 'instance' field.
   * @param value the value to set.
   */
  public void setInstance(CharSequence value) {
    this.instance = value;
  }

  /**
   * Gets the value of the 'source_type' field.
   * @return The value of the 'source_type' field.
   */
  public CharSequence getSourceType() {
    return source_type;
  }

  /**
   * Sets the value of the 'source_type' field.
   * @param value the value to set.
   */
  public void setSourceType(CharSequence value) {
    this.source_type = value;
  }

  /**
   * Gets the value of the 'source_category' field.
   * @return The value of the 'source_category' field.
   */
  public CharSequence getSourceCategory() {
    return source_category;
  }

  /**
   * Sets the value of the 'source_category' field.
   * @param value the value to set.
   */
  public void setSourceCategory(CharSequence value) {
    this.source_category = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'checkpoint' field.
   * @return The value of the 'checkpoint' field.
   */
  public CharSequence getCheckpoint() {
    return checkpoint;
  }

  /**
   * Sets the value of the 'checkpoint' field.
   * @param value the value to set.
   */
  public void setCheckpoint(CharSequence value) {
    this.checkpoint = value;
  }

  /**
   * Gets the value of the 'record_type' field.
   * @return The value of the 'record_type' field.
   */
  public CharSequence getRecordType() {
    return record_type;
  }

  /**
   * Sets the value of the 'record_type' field.
   * @param value the value to set.
   */
  public void setRecordType(CharSequence value) {
    this.record_type = value;
  }

  /**
   * Gets the value of the 'db' field.
   * @return The value of the 'db' field.
   */
  public CharSequence getDb() {
    return db;
  }

  /**
   * Sets the value of the 'db' field.
   * @param value the value to set.
   */
  public void setDb(CharSequence value) {
    this.db = value;
  }

  /**
   * Gets the value of the 'table_name' field.
   * @return The value of the 'table_name' field.
   */
  public CharSequence getTableName() {
    return table_name;
  }

  /**
   * Sets the value of the 'table_name' field.
   * @param value the value to set.
   */
  public void setTableName(CharSequence value) {
    this.table_name = value;
  }

  /**
   * Gets the value of the 'record_recording' field.
   * @return The value of the 'record_recording' field.
   */
  public CharSequence getRecordRecording() {
    return record_recording;
  }

  /**
   * Sets the value of the 'record_recording' field.
   * @param value the value to set.
   */
  public void setRecordRecording(CharSequence value) {
    this.record_recording = value;
  }

  /**
   * Gets the value of the 'primary' field.
   * @return The value of the 'primary' field.
   */
  public CharSequence getPrimary() {
    return primary;
  }

  /**
   * Sets the value of the 'primary' field.
   * @param value the value to set.
   */
  public void setPrimary(CharSequence value) {
    this.primary = value;
  }

  /**
   * Gets the value of the 'fields_enc' field.
   * @return The value of the 'fields_enc' field.
   */
  public CharSequence getFieldsEnc() {
    return fields_enc;
  }

  /**
   * Sets the value of the 'fields_enc' field.
   * @param value the value to set.
   */
  public void setFieldsEnc(CharSequence value) {
    this.fields_enc = value;
  }

  /**
   * Gets the value of the 'isFirstInLogevent' field.
   * @return The value of the 'isFirstInLogevent' field.
   */
  public Boolean getIsFirstInLogevent() {
    return isFirstInLogevent;
  }

  /**
   * Sets the value of the 'isFirstInLogevent' field.
   * @param value the value to set.
   */
  public void setIsFirstInLogevent(Boolean value) {
    this.isFirstInLogevent = value;
  }

  /**
   * Gets the value of the 'fields' field.
   * @return The value of the 'fields' field.
   */
  public java.util.List<com.mime.dbsync.model.DTSField> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * @param value the value to set.
   */
  public void setFields(java.util.List<com.mime.dbsync.model.DTSField> value) {
    this.fields = value;
  }

  /**
   * Creates a new DTSRecord RecordBuilder.
   * @return A new DTSRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new DTSRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DTSRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new DTSRecord RecordBuilder by copying an existing DTSRecord instance.
   * @param other The existing instance to copy.
   * @return A new DTSRecord RecordBuilder
   */
  public static Builder newBuilder(DTSRecord other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for DTSRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DTSRecord>
    implements org.apache.avro.data.RecordBuilder<DTSRecord> {

    private CharSequence record_id;
    private CharSequence instance;
    private CharSequence source_type;
    private CharSequence source_category;
    private CharSequence timestamp;
    private CharSequence checkpoint;
    private CharSequence record_type;
    private CharSequence db;
    private CharSequence table_name;
    private CharSequence record_recording;
    private CharSequence primary;
    private CharSequence fields_enc;
    private Boolean isFirstInLogevent;
    private java.util.List<com.mime.dbsync.model.DTSField> fields;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.record_id)) {
        this.record_id = data().deepCopy(fields()[0].schema(), other.record_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instance)) {
        this.instance = data().deepCopy(fields()[1].schema(), other.instance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source_type)) {
        this.source_type = data().deepCopy(fields()[2].schema(), other.source_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source_category)) {
        this.source_category = data().deepCopy(fields()[3].schema(), other.source_category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.checkpoint)) {
        this.checkpoint = data().deepCopy(fields()[5].schema(), other.checkpoint);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.record_type)) {
        this.record_type = data().deepCopy(fields()[6].schema(), other.record_type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.db)) {
        this.db = data().deepCopy(fields()[7].schema(), other.db);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.table_name)) {
        this.table_name = data().deepCopy(fields()[8].schema(), other.table_name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.record_recording)) {
        this.record_recording = data().deepCopy(fields()[9].schema(), other.record_recording);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.primary)) {
        this.primary = data().deepCopy(fields()[10].schema(), other.primary);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.fields_enc)) {
        this.fields_enc = data().deepCopy(fields()[11].schema(), other.fields_enc);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isFirstInLogevent)) {
        this.isFirstInLogevent = data().deepCopy(fields()[12].schema(), other.isFirstInLogevent);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.fields)) {
        this.fields = data().deepCopy(fields()[13].schema(), other.fields);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DTSRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(DTSRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.record_id)) {
        this.record_id = data().deepCopy(fields()[0].schema(), other.record_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instance)) {
        this.instance = data().deepCopy(fields()[1].schema(), other.instance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source_type)) {
        this.source_type = data().deepCopy(fields()[2].schema(), other.source_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source_category)) {
        this.source_category = data().deepCopy(fields()[3].schema(), other.source_category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.checkpoint)) {
        this.checkpoint = data().deepCopy(fields()[5].schema(), other.checkpoint);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.record_type)) {
        this.record_type = data().deepCopy(fields()[6].schema(), other.record_type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.db)) {
        this.db = data().deepCopy(fields()[7].schema(), other.db);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.table_name)) {
        this.table_name = data().deepCopy(fields()[8].schema(), other.table_name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.record_recording)) {
        this.record_recording = data().deepCopy(fields()[9].schema(), other.record_recording);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.primary)) {
        this.primary = data().deepCopy(fields()[10].schema(), other.primary);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.fields_enc)) {
        this.fields_enc = data().deepCopy(fields()[11].schema(), other.fields_enc);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isFirstInLogevent)) {
        this.isFirstInLogevent = data().deepCopy(fields()[12].schema(), other.isFirstInLogevent);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.fields)) {
        this.fields = data().deepCopy(fields()[13].schema(), other.fields);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'record_id' field.
      * @return The value.
      */
    public CharSequence getRecordId() {
      return record_id;
    }

    /**
      * Sets the value of the 'record_id' field.
      * @param value The value of 'record_id'.
      * @return This builder.
      */
    public Builder setRecordId(CharSequence value) {
      validate(fields()[0], value);
      this.record_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'record_id' field has been set.
      * @return True if the 'record_id' field has been set, false otherwise.
      */
    public boolean hasRecordId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'record_id' field.
      * @return This builder.
      */
    public Builder clearRecordId() {
      record_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'instance' field.
      * @return The value.
      */
    public CharSequence getInstance() {
      return instance;
    }

    /**
      * Sets the value of the 'instance' field.
      * @param value The value of 'instance'.
      * @return This builder.
      */
    public Builder setInstance(CharSequence value) {
      validate(fields()[1], value);
      this.instance = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'instance' field has been set.
      * @return True if the 'instance' field has been set, false otherwise.
      */
    public boolean hasInstance() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'instance' field.
      * @return This builder.
      */
    public Builder clearInstance() {
      instance = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source_type' field.
      * @return The value.
      */
    public CharSequence getSourceType() {
      return source_type;
    }

    /**
      * Sets the value of the 'source_type' field.
      * @param value The value of 'source_type'.
      * @return This builder.
      */
    public Builder setSourceType(CharSequence value) {
      validate(fields()[2], value);
      this.source_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source_type' field has been set.
      * @return True if the 'source_type' field has been set, false otherwise.
      */
    public boolean hasSourceType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source_type' field.
      * @return This builder.
      */
    public Builder clearSourceType() {
      source_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'source_category' field.
      * @return The value.
      */
    public CharSequence getSourceCategory() {
      return source_category;
    }

    /**
      * Sets the value of the 'source_category' field.
      * @param value The value of 'source_category'.
      * @return This builder.
      */
    public Builder setSourceCategory(CharSequence value) {
      validate(fields()[3], value);
      this.source_category = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'source_category' field has been set.
      * @return True if the 'source_category' field has been set, false otherwise.
      */
    public boolean hasSourceCategory() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'source_category' field.
      * @return This builder.
      */
    public Builder clearSourceCategory() {
      source_category = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(CharSequence value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkpoint' field.
      * @return The value.
      */
    public CharSequence getCheckpoint() {
      return checkpoint;
    }

    /**
      * Sets the value of the 'checkpoint' field.
      * @param value The value of 'checkpoint'.
      * @return This builder.
      */
    public Builder setCheckpoint(CharSequence value) {
      validate(fields()[5], value);
      this.checkpoint = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'checkpoint' field has been set.
      * @return True if the 'checkpoint' field has been set, false otherwise.
      */
    public boolean hasCheckpoint() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'checkpoint' field.
      * @return This builder.
      */
    public Builder clearCheckpoint() {
      checkpoint = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'record_type' field.
      * @return The value.
      */
    public CharSequence getRecordType() {
      return record_type;
    }

    /**
      * Sets the value of the 'record_type' field.
      * @param value The value of 'record_type'.
      * @return This builder.
      */
    public Builder setRecordType(CharSequence value) {
      validate(fields()[6], value);
      this.record_type = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'record_type' field has been set.
      * @return True if the 'record_type' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'record_type' field.
      * @return This builder.
      */
    public Builder clearRecordType() {
      record_type = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'db' field.
      * @return The value.
      */
    public CharSequence getDb() {
      return db;
    }

    /**
      * Sets the value of the 'db' field.
      * @param value The value of 'db'.
      * @return This builder.
      */
    public Builder setDb(CharSequence value) {
      validate(fields()[7], value);
      this.db = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'db' field has been set.
      * @return True if the 'db' field has been set, false otherwise.
      */
    public boolean hasDb() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'db' field.
      * @return This builder.
      */
    public Builder clearDb() {
      db = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'table_name' field.
      * @return The value.
      */
    public CharSequence getTableName() {
      return table_name;
    }

    /**
      * Sets the value of the 'table_name' field.
      * @param value The value of 'table_name'.
      * @return This builder.
      */
    public Builder setTableName(CharSequence value) {
      validate(fields()[8], value);
      this.table_name = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'table_name' field has been set.
      * @return True if the 'table_name' field has been set, false otherwise.
      */
    public boolean hasTableName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'table_name' field.
      * @return This builder.
      */
    public Builder clearTableName() {
      table_name = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'record_recording' field.
      * @return The value.
      */
    public CharSequence getRecordRecording() {
      return record_recording;
    }

    /**
      * Sets the value of the 'record_recording' field.
      * @param value The value of 'record_recording'.
      * @return This builder.
      */
    public Builder setRecordRecording(CharSequence value) {
      validate(fields()[9], value);
      this.record_recording = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'record_recording' field has been set.
      * @return True if the 'record_recording' field has been set, false otherwise.
      */
    public boolean hasRecordRecording() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'record_recording' field.
      * @return This builder.
      */
    public Builder clearRecordRecording() {
      record_recording = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'primary' field.
      * @return The value.
      */
    public CharSequence getPrimary() {
      return primary;
    }

    /**
      * Sets the value of the 'primary' field.
      * @param value The value of 'primary'.
      * @return This builder.
      */
    public Builder setPrimary(CharSequence value) {
      validate(fields()[10], value);
      this.primary = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'primary' field has been set.
      * @return True if the 'primary' field has been set, false otherwise.
      */
    public boolean hasPrimary() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'primary' field.
      * @return This builder.
      */
    public Builder clearPrimary() {
      primary = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'fields_enc' field.
      * @return The value.
      */
    public CharSequence getFieldsEnc() {
      return fields_enc;
    }

    /**
      * Sets the value of the 'fields_enc' field.
      * @param value The value of 'fields_enc'.
      * @return This builder.
      */
    public Builder setFieldsEnc(CharSequence value) {
      validate(fields()[11], value);
      this.fields_enc = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'fields_enc' field has been set.
      * @return True if the 'fields_enc' field has been set, false otherwise.
      */
    public boolean hasFieldsEnc() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'fields_enc' field.
      * @return This builder.
      */
    public Builder clearFieldsEnc() {
      fields_enc = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'isFirstInLogevent' field.
      * @return The value.
      */
    public Boolean getIsFirstInLogevent() {
      return isFirstInLogevent;
    }

    /**
      * Sets the value of the 'isFirstInLogevent' field.
      * @param value The value of 'isFirstInLogevent'.
      * @return This builder.
      */
    public Builder setIsFirstInLogevent(Boolean value) {
      validate(fields()[12], value);
      this.isFirstInLogevent = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'isFirstInLogevent' field has been set.
      * @return True if the 'isFirstInLogevent' field has been set, false otherwise.
      */
    public boolean hasIsFirstInLogevent() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'isFirstInLogevent' field.
      * @return This builder.
      */
    public Builder clearIsFirstInLogevent() {
      isFirstInLogevent = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'fields' field.
      * @return The value.
      */
    public java.util.List<com.mime.dbsync.model.DTSField> getFields() {
      return fields;
    }

    /**
      * Sets the value of the 'fields' field.
      * @param value The value of 'fields'.
      * @return This builder.
      */
    public Builder setFields(java.util.List<com.mime.dbsync.model.DTSField> value) {
      validate(fields()[13], value);
      this.fields = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'fields' field has been set.
      * @return True if the 'fields' field has been set, false otherwise.
      */
    public boolean hasFields() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'fields' field.
      * @return This builder.
      */
    public Builder clearFields() {
      fields = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DTSRecord build() {
      try {
        DTSRecord record = new DTSRecord();
        record.record_id = fieldSetFlags()[0] ? this.record_id : (CharSequence) defaultValue(fields()[0]);
        record.instance = fieldSetFlags()[1] ? this.instance : (CharSequence) defaultValue(fields()[1]);
        record.source_type = fieldSetFlags()[2] ? this.source_type : (CharSequence) defaultValue(fields()[2]);
        record.source_category = fieldSetFlags()[3] ? this.source_category : (CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (CharSequence) defaultValue(fields()[4]);
        record.checkpoint = fieldSetFlags()[5] ? this.checkpoint : (CharSequence) defaultValue(fields()[5]);
        record.record_type = fieldSetFlags()[6] ? this.record_type : (CharSequence) defaultValue(fields()[6]);
        record.db = fieldSetFlags()[7] ? this.db : (CharSequence) defaultValue(fields()[7]);
        record.table_name = fieldSetFlags()[8] ? this.table_name : (CharSequence) defaultValue(fields()[8]);
        record.record_recording = fieldSetFlags()[9] ? this.record_recording : (CharSequence) defaultValue(fields()[9]);
        record.primary = fieldSetFlags()[10] ? this.primary : (CharSequence) defaultValue(fields()[10]);
        record.fields_enc = fieldSetFlags()[11] ? this.fields_enc : (CharSequence) defaultValue(fields()[11]);
        record.isFirstInLogevent = fieldSetFlags()[12] ? this.isFirstInLogevent : (Boolean) defaultValue(fields()[12]);
        record.fields = fieldSetFlags()[13] ? this.fields : (java.util.List<com.mime.dbsync.model.DTSField>) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DTSRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DTSRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DTSRecord>
    READER$ = (org.apache.avro.io.DatumReader<DTSRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
